# Parand Data Structure and Algorithm Competitive Practice

## فهرست

- [مقدمه و توضیح عملکرد ریپو](#مقدمه-و-توضیح-ریپو-repository)

- [مسابقات](#آی-سی-پی-سی-icpc)

- [منابع](#منابع-آموزشی-و-سوالات)

<!-- [english](#Intro) -->

# مقدمه و توضیح ریپو (Repository)

سوال ها به ترتیب قرارگیری در گروه و ریپو شماره گذاری می شوند.

## سختی سوال ها

سختی سوال ها بعد از شماره ی آن در اسم ذکر شده که به ترتیب زیر است:

| پسوند | میزان سختی |
| ----- | ---------- |
| A     | آسان       |
| B     | متوسط      |
| C     | سخت        |

> `01A`

    	حرف A بعد از شماره سوال به معنی آسان بودن سوال است.

## موضوع های سوالات

سوالات الگوریتم موضوع های زیادی دارن و درکل مضوع مهم در اونها طرز فکر و طریقه پیاده سازی هست. بعلاوه که گاهی یک مسئله میتونه به چند روش مختلف حل شه. ولی به طور معمول در ۹ دسته زیر میشه اون هارو طبقه بندی کرد (با اسم الگوریتم ها به مرور زمان آشنا میشین و جای نگرانی نیست. یه سری از اونهارو شایدم استفاده میکنین و فقط اسمشونو نمیدونین):

### لیست موضوعات

#### رشته

الگوریتم های تغییر و پیمایش برروی رشته ها را شامل و رابطه ی نزدیکی با الگوریتم های جستجو دارد. موضوع طریقه پیاده سازیدر این نوع سوال ها پررنگ تر است. مثال الگوریتمها:

> Knuth Morris Pratt(KMP), Z algorithm, Suffix arrays/Suffix trees. These are bit advanced algorithms

#### گراف

این دسته از سوالات ارتباط نزدیکی با نظریه ماتریس ها و ساختمان داده دارند. به ویژه درخت ها و الگوریتم جستجو در آنها. مثال الگوریتمها:

> Breadth first search(BFS), Depth first search(DFS), Strongly connected components(SCC), Dijkstra, Floyd-Warshall, Minimum spanning tree(MST), Topological sort.

#### برنامه نویسی پویا

برنامه نویسی پویا (Dynamic Programming) در کل درنظر دارد تا از محاسبه اضافی جلوگیری کند. اغلب سوالات برنامه نویسی پویا با تکرار و با استفاده از روابط بازگشتی (recursion) قابل حل هستند، ولی اینگونه حل بهینه نبوده و با پیاده سازی های خاص روش های بهینه برای اینکار وجود دارد. مثال الگوریتمها:

> Standard dynamic programming problems such as Rod Cutting, Knapsack, Matrix chain multiplication etc.

##### نظریه اعداد

مجموعه روش های رسیدن به اعداد مورد نظر با توجه تئوری های این حوزه. به جای استفاده از متد brute-force (در نظر گرفتن تمام حالت ها و ادامه تا رسیدن به جواب) و امتحان تمام حالت های مساعد با شرط سوال، از شرط سوال عدد های مد نظر را تولید میکنیم. این مجموعه روش ها ارتباط نزدیکی با برنامه نویسی پویا دارند. مثال الگوریتمها:

> Modular arithmetic, Fermat’s theorem, Chinese remainder theorem(CRT), Euclidian method for GCD, Logarithmic Exponentiation, Sieve of Eratosthenes, Euler’s totient function.

#### حریصانه

الگوریتم های حریصانه (Greedy algorithms) با توجه به اختصاص معیار (heuristic value) در هرمرحله سعی میکند بهترین گزینه برای الگوریتم را انتخاب کند. مثال الگوریتمها:

> Standard problems such as Activity selection.Standard problems such as Activity selection.

#### جستجو

مجموعه الگوریتم های مربوط به جستجو در یک دنباله. مثال الگوریتمها:

> Binary search, Ternary search and Meet in the middle.

#### ساختمان داده

ساختمان های داده پایه حل مسائل الگوریتم هستند و انتخاب نوع داده درست در حل سوال آنچنان موثر هست که معمولا اینگونه سوال ها در دسته بندی مختص ساختمان داده قرار میگیرد. مثال از داده ساختار ها:

> Data structures (Basic): Stacks, Queues, Trees and Heaps.
> Data structures (Advanced): Trie, Segment trees, Fenwick tree or Binary indexed tree(BIT), Disjoint data structures.

##### هندسه

بخشی از سوالات الگوریتم مربوط به مسائل ریاضی و به ویژه هندسه هست. ولی به طور معمول دانش زیادی از ریاضی و هندسه مورد نیاز نیست و از قواعد ساده آن استفاده میشد. مثال:

> Graham-Scan for convex hull, Line sweep.

#### نظریه بازی ها

مجموعه سوالات الگوریتم که با توجه به قواعد و شرط های زیاد برای اجرا در این دسته قرار میگیرند. سوالات مربوط به بازی هایی مثل شطرنج با شرایط خاص در این دسته هستند. مثال ها:

> Basic principles of Nim game, Grundy numbers, Sprague-Grundy theorem.

### نماد ها

| موضوع               | پسوند |
| ------------------- | ----- |
| Graph               | G     |
| string              | S     |
| Search              | R     |
| Number Theory       | N     |
| Dynamic Programming | D     |
| Greedy              | G     |
| Data Structure      | T     |
| Geometry            | M     |
| Game Theory         | A     |

> `01A-M`

    	سوال هندسه ساده

> `04B-GT`

    	سوال ساختمان داده و گراف متوسط

# آی سی پی سی (ICPC)

مسابقات بین‌المللی برنامه‌نویسی دانش‌جویی (ICPC) همه ساله به عنوان یکی از مهم‌ترین و معتبرترین مسابقات برنامه‌نویسی در سطج جهان برگزار می‌گردد. این مسابقات تا سال ۲۰۱۸ از سوی انجمن ماشین‌های محاسباتی و با پشتیبانی شرکت‌های بزرگی چون IBM برگزار می‌شد و با نام ACM-ICPC خوانده می‌شد. این مسابقات در ایران به اختصار به مسابقات ای‌سی‌ام معروف است. تیم‌های شرکت‌کننده در این مسابقات، دانشجویان دانشگاه‌های سرتاسر جهان هستند که ابتدا در مسابقات منطقه‌ای شرکت می‌کنند و سپس تیم‌های برگزیده جواز حضور در فینال را کسب می‌نمایند. مسابقه فینال معمولاً در اوایل بهار هر سال برگزار می‌شود. مسابقات منطقه‌ای غرب آسیا از سال ۱۳۷۸ تا کنون (به جز سال ۱۳۹۰) در دانشگاه صنعتی شریف برگزار شده‌است. مسابقه منطقه‌ای غرب آسیا عموماً در اواخر پاییز هر سال برگزار می‌شود.

در چنین مسابقاتی علاوه بر تسلط بر یکی از زبان‌های برنامه‌نویسی C,CPP, JAVA, KOTLIN, PYTHON(البته تضمین می‌شود تمام سؤال‌ها به وسیله C/CPP/JAVA قابل حل باشند) مباحثی نظیر طراحی الگوریتم و ساختمان داده‌ها بسیار تأثیرگذار هستند.

مسابقات بین‌المللی برنامه‌نویسی دانش‌جویی یک مسابقهٔ تیمی می‌باشد. قوانین موجود بیان می‌کنند که هر تیم باید شامل ۳ نفر باشد. شرکت‌کنندگان باید در دانشگاه مشغول به تحصیل باشند و کمتر از ۴ سال سابقهٔ حضور در دانشگاه داشته باشند. دانشجویانی که دو بار در مرحلهٔ جهانی حضور داشته‌اند نیز نمی‌توانند در مسابقه شرکت کنند. مدت مسابقه مغمولا ۵ ساعت (بسته به سختی و تعداد سوال میتواند تغییر کند) و تعداد سؤالاتی معمولاً بین ۸ تا ۱۲ سؤال است. تیم‌ها که تنها یک رایانه در اختیار دارند، باید جواب‌های خود را در قالب کد به سیستم داوری خودکار ارسال کنند. سپس برنامه‌های ارسالی توسط داده‌ها مورد آزمایش قرار می‌گیرند. اگر برنامه‌ای نتواند در مقابل تمام داده‌ها پاسخ درستی بدهد مورد قبول قرار نمی‌گیرد و تیم با احتساب جریمه می‌تواند برنامه دیگری ارسال کند.

تیمی برنده است که بیشترین تعداد سؤال‌ها را به درستی حل کند. اگر رتبه‌بندی تیم‌ها برای دریافت مدال و جوایز ضروری باشد، رتبه تیم با توجه به زمان سپری شده در هر مرحله برای ارسال پاسخ درست به علاوهٔ بیست دقیقه برای هر پاسخ نادرست که قبل از هر سؤال حل شده ارسال شده، تعریف می‌شود.

به عنوان مثال شرایطی را برای دو تیم آبی و قرمز در نظر می‌گیریم. این دو تیم از نظر تعداد سؤالات حل شده با یک دیگر برابر هستند. تیم قرمز پاسخ‌های خود را برای سؤالات A و B به ترتیب در ۰۱:۰۰ و ۰۲:۴۵ پس از آغاز مسابقه ارسال کرده‌است. همچنین تیم قرمز یک پاسخ غلط برای سؤال C ارسال کرده‌است اما چون نتوانستند سؤال C را حل کنند این پاسخ غلط در نظر گرفته نمی‌شود. تیم آبی پاسخ‌های خود را برای سؤالات A و C در ۰۱:۲۰ و ۰۲:۰۰ پس از آغاز مسابقه ارسال کرده‌است. همچنین تیم آبی یک ارسال غلط برای سؤال C داشته‌است.نتیجه به این صورت ارزیابی می‌شود که تیم قرمز در مجموع ۰۱:۰۰+۰۲:۴۵=۳:۴۵ و تیم آبی در مجموع ۰۱:۲۰+۰۲:۰۰+۰۰:۲۰=۰۳:۴۰ زمان برای سؤالات صرف کرده‌اند. در نتیجه تیم آبی برنده است. (برگرفته از ویکیپدیا و ICPC.global)

> ‌ برندگان گذشته مسابقات و اطلاعات رقابت آن سال [اینجا](https://icpc.global/community/world-finals-champions)

# منابع آموزشی و سوالات

منابع آموزشی انگلیسی مربوط خیلی زیاد هستن. از منابع معروف که برای شروع مناسب هستن به صورت زیر هستن:

- [Geeks for Geeks](https://www.geeksforgeeks.org/)

سایت هندی بسایر معروف بین برنامه نویسان

## سایت های رقابت و بانک سوالات

## سایت های آموزشی

https://cp-algorithms.com

## کتب آموزشی

کتاب های متنوعی در این زمینه وجود دارد ولی ۴ کتاب معروف که پرطرفدار هستند به صورت زیر است:

### 1 Programming Challenges

img
کتاب مناسبی برای شروع. همراه با تمرین ها

### 2 Introduction to Algorithms(CLRS)

بهترین کتاب برای یادگیری الگوریتم ولی متن آسانی برای شروع ندارد. معمولا توصیه میشود قبل از شروع این کتاب کتاب های دیگر در این زمینه ها مطالعه کرده باشید.

### 3 Algorithms unlocked

img
کتاب ساده شده از کتاب قبلی (Introduction to Algorithms(CLRS)). همراه با توضیح ساده و مناسب برای شروع.

### 4 Competitive Programming

این کتاب مختص مسابقات بوده و به سبک ICPC نزدیک تر است.

### نکته

> توصیه میشود برای شروع از کتاب های ۱ و ۳ (Algorithms unlocked و Programming Challenges) شروع کرده و بعدا سراغ کتاب ۲ و ۴ (Introduction to Algorithms و Competitive Programming)رفته.

### Art of Programming Contest

این کتاب توسط یکی از شرکت کننده های ICPC نوشته شده و مطالعه اون مخصوصا برای دوستانی که C/CPP کار میکنن توصیه میشه.

## مسابقات الگوریتم

مسابقات ACM ICPC بزرگ‌ترین مسابقه‌ی بین‌المللی دانشجویی برنامه‌نویسی است که در قالب تیم‌های سه نفره برگزار می‌شود. تنها تیم‌هایی فرصت حضور در مسابقه‌ی جهانی را پیدا می‌کنند که بتوانند از یکی از مسابقات منطقه‌ای صعود کنند. مسابقه‌ی منطقه‌ای تهران هر سال با شرکت ۸۰ تیم از دانشگاه‌های سراسر کشور برگزار می‌گردد. امسال نیز این مسابقات در تاریخ ۲۹ و ۳۰ آذر در دانشگاه شریف برگزار می‌شود.
اگر مایلید که به عنوان یکی از تیم‌های دانشگاه شریف در این مسابقات شرکت کنید، حداکثر تا ساعت ۱۸ روز چهارشنبه ۲ آبان، فرم زیر را پر کنید. پس از پایان مهلت ثبت‌نام، نحوه‌ی انتخاب تیم‌ها از طریق ایمیل به شما اطلاع رسانی می‌شود.
برای اطلاعات بیشتر می‌توانید به وب‌سایت مسابقه‌ی منطقه‌ای به نشانی icpc.sharif.edu مراجعه کنید.

## بلاگ ها

http://blog.icpc.ir/

<hr>

<!-- # Intro -->
